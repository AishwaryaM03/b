import java.util.*;


class FractionalKnapsack {
    // Function to get the maximum value that can be carried in the knapsack
    static double getMaxValue(Item[] items, int capacity) {
        // Sort items by value-to-weight ratio in descending order
        Arrays.sort(items, (a, b) -> Double.compare((double) b.value / b.weight, (double) a.value / a.weight));

        double totalValue = 0.0; // Maximum value that fits into the knapsack

        System.out.println("\nItems included in the knapsack:");
        for (Item item : items) {
            if (capacity >= item.weight) {
                // Item can be taken fully
                totalValue += item.value;
                capacity -= item.weight;
                System.out.printf("Item %d: Fully included (Value = %d, Weight = %d)\n", 
                                  item.index, item.value, item.weight);
            } else {
                // Take a fraction of the item to fill the remaining capacity
                double fraction = (double) capacity / item.weight;
                totalValue += item.value * fraction;
                System.out.printf("Item %d: Partially included (Fraction = %.2f, Value = %.2f, Weight = %.2f)\n", 
                                  item.index, fraction, item.value * fraction, item.weight * fraction);
                break; // Knapsack is full
            }
        }
        return totalValue;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of items: ");
        int n = sc.nextInt();
        Item[] items = new Item[n];

        // Input values and weights of the items
        System.out.println("Enter value and weight of each item:");
        for (int i = 0; i < n; i++) {
            System.out.print("Item " + (i + 1) + ": ");
            int value = sc.nextInt();
            int weight = sc.nextInt();
            items[i] = new Item(value, weight, i + 1);
        }

        System.out.print("Enter knapsack capacity: ");
        int capacity = sc.nextInt();

        // Calculate the maximum value that fits into the knapsack
        double maxValue = getMaxValue(items, capacity);
        System.out.printf("\nMaximum value in the knapsack: %.2f\n", maxValue);

        sc.close();
    }
}